{"version":3,"sources":["components/userInput/UserInput.module.css","components/weatherResults/ResultsStyle.module.css","components/userInput/UserInputs.jsx","components/weatherResults/WeatherResultsCard.jsx","components/weatherResults/WeatherResults.jsx","components/Snackbars/snackBarWarning.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","InputStyle","WeatherResults","withStyles","theme","button","margin","spacing","unit","input","display","textField","marginLeft","marginRight","width","props","classes","react_default","a","createElement","FormControl_default","className","TextField_default","onChange","onChangeInputHandler","id","label","type","Button_default","variant","color","onClick","search","farenheit","celcius","card","maxWidth","media","height","Card_default","CardActionArea_default","CardMedia_default","style","backgroundRepeat","backgroundPosition","image","icon","CardContent_default","Typography_default","gutterBottom","component","city","degrees","units","description","weatherResults","ResultsStyle","toggleUnits","weatherResults_WeatherResultsCard","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","backgroundColor","green","palette","dark","primary","amber","fontSize","iconVariant","opacity","message","alignItems","onClose","other","Object","objectWithoutProperties","Icon","SnackbarContent_default","assign","classNames","aria-describedby","action","IconButton_default","key","aria-label","close","Close_default","CustomizedSnackbars","state","open","_this","isOpen","handleClick","setState","handleClose","event","reason","nextProps","this","nextState","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","React","Component","API_KEY","axios","defaults","baseURL","CELCIUS","FARENHEIT","App","weatherData","errorEncountered","searchClicked","target","value","get","then","response","data","catch","console","log","convertKelvinToCelsius","kelvin","Math","round","convertKelvinToFarenheit","celsius","floor","_this2","results","_this$state$weatherDa","name","weather","main","temp","snackBarWarning","UserInputs","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.331921c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputStyle\":\"UserInput_InputStyle__2InC5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherResults\":\"ResultsStyle_WeatherResults__2WfWS\"};","import React from \"react\";\r\n\r\nimport InputStyle from \"./UserInput.module.css\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit\r\n  },\r\n  input: {\r\n    display: \"none\"\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n    width: 200\r\n  }\r\n});\r\n\r\nconst userInput = props => {\r\n  const { classes } = props;\r\n  return (\r\n    <FormControl className={InputStyle.InputStyle}>\r\n      <TextField\r\n        onChange={props.onChangeInputHandler}\r\n        id=\"standard-search\"\r\n        label=\"city or city,country\"\r\n        type=\"search\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <Button\r\n        className={classes.button}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={props.search}\r\n      >\r\n        Search\r\n      </Button>\r\n      {/* <Button\r\n        className={classes.button}\r\n        variant=\"outlined\"\r\n        color=\"secondary\"\r\n        onClick={props.toggleUnits}\r\n      >\r\n        {props.units}\r\n      </Button> */}\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(userInput);\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    height: 140\r\n  }\r\n};\r\n\r\nconst farenheit = <span>&deg;F</span>;\r\nconst celcius = <span>&deg;C</span>;\r\n\r\nfunction WeatherResultsCard(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          style={{\r\n            backgroundRepeat: \"no-repeat\",\r\n            backgroundPosition: \"center center\",\r\n\r\n            height: \"100px\"\r\n          }}\r\n          className={classes.media}\r\n          image={props.icon}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.city} <br />\r\n            {props.degrees}\r\n            {props.units === \"Celcius\" ? celcius : farenheit}\r\n          </Typography>\r\n          <Typography component=\"p\">{props.description}</Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(WeatherResultsCard);\r\n","import React from \"react\";\r\nimport ResultsStyle from \"./ResultsStyle.module.css\";\r\nimport WeatherResultsCard from \"./WeatherResultsCard\";\r\nconst weatherResults = props => {\r\n  return (\r\n    <div className={ResultsStyle.WeatherResults} onClick={props.toggleUnits}>\r\n      <WeatherResultsCard\r\n        description={props.description}\r\n        city={props.city}\r\n        units={props.units}\r\n        degrees={props.degrees}\r\n        icon={props.icon}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default weatherResults;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport amber from \"@material-ui/core/colors/amber\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon\r\n};\r\n\r\nconst styles1 = theme => ({\r\n  success: {\r\n    backgroundColor: green[600]\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.dark\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700]\r\n  },\r\n  icon: {\r\n    fontSize: 20\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing.unit\r\n  },\r\n  message: {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  }\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n  const { classes, className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={classNames(classes[variant], className)}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n      }\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"Close\"\r\n          color=\"inherit\"\r\n          className={classes.close}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  message: PropTypes.node,\r\n  onClose: PropTypes.func,\r\n  variant: PropTypes.oneOf([\"success\", \"warning\", \"error\", \"info\"]).isRequired\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nconst styles2 = theme => ({\r\n  margin: {\r\n    margin: theme.spacing.unit\r\n  }\r\n});\r\n\r\nclass CustomizedSnackbars extends React.Component {\r\n  state = {\r\n    open: this.props.isOpen\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  // synch state with props\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ open: nextProps.isOpen });\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.state.open;\r\n  }\r\n\r\n  handleClose = (event, reason) => {\r\n    // if (reason === \"clickaway\") {\r\n    //   return;\r\n    // }\r\n\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"left\"\r\n        }}\r\n        open={this.state.open}\r\n        autoHideDuration={3000}\r\n        onClose={this.handleClose}\r\n      >\r\n        <MySnackbarContentWrapper\r\n          variant={this.props.variant}\r\n          className={classes.margin}\r\n          message={this.props.message}\r\n          onClose={this.handleClose}\r\n        />\r\n      </Snackbar>\r\n    );\r\n  }\r\n}\r\n\r\nCustomizedSnackbars.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  variant: PropTypes.string,\r\n  message: PropTypes.string\r\n};\r\n\r\nexport default withStyles(styles2)(CustomizedSnackbars);\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport \"typeface-roboto\";\n\nimport axios from \"axios\";\nimport UserInput from \"../components/userInput/UserInputs\";\n\nimport WeatherResults from \"../components/weatherResults/WeatherResults\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nimport CustomizedSnackbars from \"../components/Snackbars/snackBarWarning\";\n\nconst API_KEY = \"&APPID=\" + process.env.REACT_APP_WEATHER_API_KEY;\naxios.defaults.baseURL = \"http://api.openweathermap.org/data/2.5\";\nconst weatherIconBaseURL = \"http://openweathermap.org/img/w/\";\nconst CELCIUS = \"Celcius\";\nconst FARENHEIT = \"Farenheit\";\nconst WARNING = \"warning\";\nconst WARNING_MESSAGE = \"Invalid entry\";\n\nclass App extends Component {\n  state = {\n    weatherData: null,\n    search: \"\",\n    units: FARENHEIT,\n    errorEncountered: false,\n    searchClicked: false\n  };\n\n  componentDidMount() {\n    this.setState({ errorEncountered: false });\n  }\n\n  // resets the state when user types\n  // inside the input\n  onChangeInputHandler = event => {\n    this.setState({\n      search: event.target.value,\n      errorEncountered: false,\n      searchClicked: false\n    });\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.state.searchClicked !== nextState.searchClicked ||\n      this.state.weatherData !== nextState.weatherData ||\n      this.state.errorEncountered !== nextState.errorEncountered ||\n      this.state.units !== nextState.units\n    );\n  }\n\n  // fetch weather data from OpenWeatherMap API\n  // for the entered city in the search textbox\n  search = input => {\n    axios\n      .get(\"weather?q=\" + this.state.search + API_KEY)\n      .then(response => {\n        this.setState({ weatherData: response.data }, () => {\n          this.setState({ errorEncountered: false });\n        });\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({ errorEncountered: true });\n      });\n\n    this.setState({ searchClicked: true });\n  };\n\n  convertKelvinToCelsius = kelvin => {\n    if (kelvin < 0) {\n      return \"below absolute zero (0 K)\";\n    } else {\n      return Math.round(kelvin - 273.15);\n    }\n  };\n\n  convertKelvinToFarenheit = kelvin => {\n    const celsius = kelvin - 273;\n    return Math.floor(celsius * (9 / 5) + 32);\n  };\n\n  toggleUnits = () => {\n    if (this.state.units === FARENHEIT) {\n      this.setState({ units: CELCIUS });\n    } else {\n      this.setState({ units: FARENHEIT });\n    }\n  };\n\n  render() {\n    let results = null;\n\n    if (this.state.weatherData && this.state.searchClicked) {\n      let { name, weather, main } = this.state.weatherData;\n\n      results = (\n        <WeatherResults\n          icon={weatherIconBaseURL + weather[0].icon + \".png\"}\n          description={weather[0].description}\n          city={name}\n          degrees={\n            this.state.units === CELCIUS\n              ? this.convertKelvinToFarenheit(main.temp)\n              : this.convertKelvinToCelsius(main.temp)\n          }\n          units={this.state.units === CELCIUS ? FARENHEIT : CELCIUS}\n          toggleUnits={this.toggleUnits}\n        />\n      );\n    }\n\n    if (this.state.errorEncountered && this.state.searchClicked) {\n      console.log(\"error!\");\n      results = (\n        <CustomizedSnackbars\n          isOpen={true}\n          message={WARNING_MESSAGE}\n          variant={WARNING}\n        />\n      );\n    }\n\n    return (\n      <div className=\"outer\">\n        <h1>Weather Application</h1>\n        <h4>\n          Using the OpenWeatherMap API to view the current weather in the\n          location searched.\n        </h4>\n        <FormControl className=\"App\">\n          <UserInput\n            onChangeInputHandler={this.onChangeInputHandler}\n            search={() => this.search(this.state.search)}\n            toggleUnits={this.toggleUnits}\n            units={this.state.units}\n          />\n          {results}\n        </FormControl>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}